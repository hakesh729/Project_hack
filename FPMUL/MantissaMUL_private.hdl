/**
 * @Team 11
 * @member Sathvik
 * 
 * CHIP NAME : MantissaMUL
 * 
 * DESCRIPTION :   Multiplies the mantissas in both the floating point numbers
 *                 1.Xm(8 bits) * 1.Ym(8 bits) = Pm(16 bits) 
 * 
 * Tested : @sathvik Working correctly
 *
 * Logic :
 * Uses the same circut as for the 8bit unsigned Multipler 
 * Summands at each level
 * level1 :    pp0 pp1 pp2 || pp3 pp4 pp5 || pp6 pp7
 * level2 :    c00 s00 c01 || s01 pp6 pp7
 * level3 :    c10 s10 c11 ||s11 
 * level4 :    c20 s20 s11
 * level5 :    c30 s30
 * 16BitAdder( c30 , s30 )
 *
 */

 CHIP MantissaMUL{
     IN a[8],b[8];
    OUT out[16];

    PARTS:
    //pp0
    And16(a[0..7] = a,a[8..15] = false,b[0] = b[0],b[1] = b[0],b[2] = b[0],b[3] = b[0],b[4] = b[0],b[5] = b[0],b[6] = b[0],b[7] = b[0],b[8..15] = false,out = pp0);
    //pp1
    And16(a[0] = false,a[1..8] = a,a[9..15] = false,b[0] = false,b[1] = b[1],b[2] = b[1],b[3] = b[1],b[4] = b[1],b[5] = b[1],b[6] = b[1],b[7] = b[1],b[8] = b[1],b[9..15] = false,out = pp1);
    //pp2
    And16(a[0..1] = false,a[2..9] = a,a[10..15] = false,b[0..1] = false,b[2] = b[2],b[3] = b[2],b[4] = b[2],b[5] = b[2],b[6] = b[2],b[7] = b[2],b[8] = b[2],b[9] = b[2],b[10..15] = false,out = pp2);
    //pp3
    And16(a[0..2] = false,a[3..10] = a,a[11..15] = false,b[0..2] = false,b[3] = b[3],b[4] = b[3],b[5] = b[3],b[6] = b[3],b[7] = b[3],b[8] = b[3],b[9] = b[3],b[10] = b[3],b[11..15] = false,out = pp3);    
    //pp4
    And16(a[0..3] = false,a[4..11] = a,a[12..15] = false,b[0..3] = false,b[4] = b[4],b[5] = b[4],b[6] = b[4],b[7] = b[4],b[8] = b[4],b[9] = b[4],b[10] = b[4],b[11] = b[4],b[12..15] = false,out = pp4);    
    //pp5
    And16(a[0..4] = false,a[5..12] = a,a[13..15] = false,b[0..4] = false,b[5] = b[5],b[6] = b[5],b[7] = b[5],b[8] = b[5],b[9] = b[5],b[10] = b[5],b[11] = b[5],b[12] = b[5],b[13..15] = false,out = pp5);
    //pp6
    And16(a[0..5] = false,a[6..13] = a,a[14..15] = false,b[0..5] =false,b[6] = b[6],b[7] = b[6],b[8] = b[6],b[9] = b[6],b[10] = b[6],b[11] = b[6],b[12] = b[6],b[13] = b[6],b[14..15] = false,out = pp6);
    //pp7
    And16(a[0..6] = false,a[7..14] = a,a[15] = false,b[0..6] = false,b[7] = b[7],b[8] = b[7],b[9] = b[7],b[10] = b[7],b[11] = b[7],b[12] = b[7],b[13] = b[7],b[14] = b[7],b[15] = false,out = pp7);
    
    //level1 :    pp0 pp1 pp2 || pp3 pp4 pp5 || pp6 pp7
    CSA(a = pp0,b = pp1,c = pp2,sum = s00,carry = c00);
    CSA(a = pp3,b = pp4,c = pp5,sum = s01,carry = c01);

    //level2 :    c00 s00 c01 || s01 pp6 pp7
    CSA(a = s00,b = c00,c = c01,sum = s10,carry = c10);
    CSA(a = s01,b = pp6,c = pp7,sum = s11,carry = c11);

    //level3 :    c10 s10 c11 ||s11 
    CSA(a = s10,b = c10,c = c11,sum = s20,carry = c20);

    //level4 :    c20 s20 s11
    CSA(a = s20,b = c20,c = s11,sum = s30,carry = c30);   

    //16BitAdder( c30 , s30 )
    Add16CLA(x = s30 , y = c30 , cb = false , S = false , z = out , OF = waste) ;

 }