/*Designed by : D Hakesh (cs19b017) @ Team 11

Chip Name: CPU                  # Central Processing Unit

Inputs: inM[16],                # M value input (M = contents of RAM[A])
instruction[16],                # Instruction for execution
reset                           # Signals whether to restart the current
  |-- program (reset=1) or continue executing
  |-- the current program (reset=0)

Outputs: outM[16],              # M value output
writeM,                         # Write to M?
addressM[15],                   # Address of M in data memory
pc[15]                          # Address of next instruction

Function: 
1. Executes the instruction according to the Hack machine language
specification. 

2. The D and A in the language specification refer to
CPU-resident registers, while M refers to the memory location
addressed by A (inM holds the value of this location).

3. If the instruction needs to write a value to M, the value is
placed in outM, the address is placed in addressM, and the writeM
bit is asserted. (When writeM=0, any value may appear in outM.)

4. If reset=1, then the CPU jumps to address 0 (i.e., sets pc=0 in
the next time unit) rather than to the address resulting from
executing the current instruction.

*/


CHIP CPU2300{

    IN  inM[16],instruction[16],reset;    

    OUT outM[16],writeM,addressM[15],pc[15];          
    

    PARTS:

    //Fetching details of which Instruction (A or C) 
    //Asignal = 1, if instruction[15] = 0(indicates given instruction is A instruction)
    //Csignal = 1, if instruction[15] = 1(indicates given instruction is C instruction)
    Not(in = instruction[15],out = Asignal);
    And(a = true,b = instruction[15],out = Csignal);

    /*************************************** THE A-Register *************************************/

    //We Know that,in C instruction, instruction[5] = d1 
    //indicates A register Destination.
    //Therefore , d1 = instruction[5] & Csignal.
    And(a = instruction[5],b = Csignal,out = d1); 

    /*LOGIC FOR CONTROL SIGNAL OF A-REGISTER */
    //LoadA = control signal for 'A' register
    //Which is true if given instruction is Asignal or d1 = 1
    //Therefore , LoadA = d1 | Asignal.
    Or(a = d1,b = Asignal,out = LoadA);

    /*INPUT DATA FOR A REGISTER*/
    //Data Stored in "A" register is either "A"-instruction or Output from HackALU.
    //inputA = inputA for "A" register
    Mux16(a = instruction, b = out, sel = Csignal, out = inputA);

    /*STORING AT A REGISTER */
    //if LoadA = 1 ,given inputA is stored in "A" register.
    ARegister(in = inputA,load = LoadA,out = A,out[0..14] = addressM);

    /*************************************** THE D-Register *************************************/
    //We know that,In C instruction if d2 = instruction[4] 
    //indicates D register Destination.
    // d2  act as control signal.
    And(a = instruction[4],b = Csignal,out = d2); 
    // input data for D register is from HackALU output,,
    DRegister(in = out,load = d2,out = D);

    /*************************************** writeM signal *************************************/
    //Control sigal for write operation in Data Memory 
    And(a = instruction[3],b = Csignal,out = writeM);

    /*************************************** THE Hack ALU *************************************/
    //NOTE;IF INSTRUCTION IS A INSTRUCTION,HACKALU STILL PERFORMES OPERATION BUT
    //     THOSE RESULTS ARE NOT GOING TO BE USED / STORED .(proper care has been taken)
    //     SO,THERE IS NO PROBLEM IF HACKALU IS ACTIVE EVEN FOR A-INSTRUCTION.
    //     THEREFORE,WE ASSUME INSTRUCTION IS C TO GET INPUTS FOR ALU.

    //One Operand to HackALU is content in D register
    //Other operand is either content at A register or 
    // content of address stored in A register ie..inM
    
    //In C instruction, a = instruction[12] = 1 => M data 
    //                                      = 0 => A register Data.
    Mux16(a = A,b = inM,sel = instruction[12],out = AorMdata); 
    
    //In C instruction,instruntion[6..11] = opcode for HackALU
    /*HACK ALU OPERATION */
    HackALU(x = D,y = AorMdata,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out = out,out = outM,zr = zr,ng = ng);

    /*************************************** THE PROGRAM COUNTER *************************************/
    //We know that , zr = 1 => out = 0 .Similarly notzr = 1 => out != 0
    //               ng = 1 => out < 0 .Similarly notng = 1 => out >= 0
    Not(in = zr,out = notzr);
    Not(in = ng,out = notng);

    /*Jump flags*/

    //if out > 0 => positive = 1
    //positive = (~zr) & (~ng) = notzr & notng
    And(a = notzr,b = notng,out = positive);
    //In C signal , j3 = instruction[0] = 1 indicates
    //whether to "JUMP" PC if ALUout > 0(ie,,positive = 1)
    //jpositive  = jump if out > 0
    And(a = instruction[0],b = positive,out = jpositive);

    //jzero = jump if out = 0 (ie..zr = 1)
    And(a = instruction[1],b = zr,out = jzero);
    //jnegative = 1 ,jump if out < 0 (ie .. ng = 1)
    And(a = instruction[2],b = ng,out = jnegative);

    //Un conditional jump 
    //unCndJmp = j1 & j2 & j3 
    //NOTE : ACTUALLY THIS LOGIC IS NOT REQUIRED TO IMPLEMENT !
    //       AS HACKALU OUPUT IS EITHER >0 OR < 0 OR =0 ALL THE TIME !
    And(a = instruction[0] ,b = instruction[1],out = temp);
    And(a = temp,b = instruction[2],out = unCndJmp);

    /*Jump Signal */
    //jmpSignal = jnegative | jzero | jpositive .
    Or8Way(in[0] = jnegative,in[1] = jzero,in[2] = jpositive,in[3] = unCndJmp,in[4..7] = false,out = jmpSignal);

    //As jump instruction is in C instruction only..
    //jump = jmpsignal & Csignal 
    And(a = jmpSignal,b = Csignal,out = jump);

    /*Program Counter Update */
    //If reset(t-1) then out(t) = 0
    //else if load(t-1) then out(t) = in(t-1)
    //     else if inc(t-1) then out(t) = out(t-1) + 1 (integer addition)
    //          else out(t) = out(t-1)
    //NOTE : since we are using 32K ROM => length of PC = 5 + 10 = 15
    //       But PC out is 16 bit 
    //       So we Truncate MSB of PC 
    PC(in = A,load = jump,inc = true,reset = reset,out[0..14] = pc);
}