/* If s1=0,s0=0 then y=x0 

   else if s1=0,s0=1 then y=x1 

   else if s1=1,s0=0 then y=x2

   else y=x3

   The assignment operations mentioned above are all 8-bit. For example, "y=x0" means for i=0,1,..,7  y[i] = x0[i]  */
 
CHIP Mux4Way8Bit
{
  IN x0[8], x1[8], x2[8], x3[8], s1, s0;
  OUT y[8];

  PARTS:
  Not(in=s1, out=nots1);
  Not(in=s0, out=nots0);

  And3(a=nots1, b=nots0, c=x0[0], out=w1);  // w1 = ~s1.~s0.x0[0]
  And3(a=nots1, b=nots0, c=x0[1], out=w2);  // w2 = ~s1.~s0.x0[1]
  And3(a=nots1, b=nots0, c=x0[2], out=w3);  // w3 = ~s1.~s0.x0[2]
  And3(a=nots1, b=nots0, c=x0[3], out=w4);  // w4 = ~s1.~s0.x0[3]
  And3(a=nots1, b=nots0, c=x0[4], out=w5);  // w5 = ~s1.~s0.x0[4]
  And3(a=nots1, b=nots0, c=x0[5], out=w6);  // w6 = ~s1.~s0.x0[5]
  And3(a=nots1, b=nots0, c=x0[6], out=w7);  // w7 = ~s1.~s0.x0[6]
  And3(a=nots1, b=nots0, c=x0[7], out=w8);  // w8 = ~s1.~s0.x0[7]


  And3(a=nots1, b=s0, c=x1[0], out=w9);     // w9 = ~s1.s0.x1[0]
  And3(a=nots1, b=s0, c=x1[1], out=w10);    // w10 = ~s1.s0.x1[1]
  And3(a=nots1, b=s0, c=x1[2], out=w11);    // w11 = ~s1.s0.x1[2]
  And3(a=nots1, b=s0, c=x1[3], out=w12);    // w12 = ~s1.s0.x1[3]
  And3(a=nots1, b=s0, c=x1[4], out=w13);    // w13 = ~s1.s0.x1[4]
  And3(a=nots1, b=s0, c=x1[5], out=w14);    // w14 = ~s1.s0.x1[5]
  And3(a=nots1, b=s0, c=x1[6], out=w15);    // w15 = ~s1.s0.x1[6]
  And3(a=nots1, b=s0, c=x1[7], out=w16);    // w16 = ~s1.s0.x1[7]

  And3(a=s1, b=nots0, c=x2[0], out=w17);     // w17 = s1.~s0.x2[0]
  And3(a=s1, b=nots0, c=x2[1], out=w18);     // w18 = s1.~s0.x2[1]
  And3(a=s1, b=nots0, c=x2[2], out=w19);     // w19 = s1.~s0.x2[2]
  And3(a=s1, b=nots0, c=x2[3], out=w20);     // w20 = s1.~s0.x2[3]
  And3(a=s1, b=nots0, c=x2[4], out=w21);     // w21 = s1.~s0.x2[4]
  And3(a=s1, b=nots0, c=x2[5], out=w22);     // w22 = s1.~s0.x2[5]
  And3(a=s1, b=nots0, c=x2[6], out=w23);     // w23 = s1.~s0.x2[6]
  And3(a=s1, b=nots0, c=x2[7], out=w24);     // w24 = s1.~s0.x2[7]

  And3(a=s1, b=s0, c=x3[0], out=w25);        // w25 = s1.s0.x3[0]
  And3(a=s1, b=s0, c=x3[1], out=w26);        // w26 = s1.s0.x3[1]
  And3(a=s1, b=s0, c=x3[2], out=w27);        // w27 = s1.s0.x3[2]
  And3(a=s1, b=s0, c=x3[3], out=w28);        // w28 = s1.s0.x3[3]
  And3(a=s1, b=s0, c=x3[4], out=w29);        // w29 = s1.s0.x3[4]
  And3(a=s1, b=s0, c=x3[5], out=w30);        // w30 = s1.s0.x3[5]
  And3(a=s1, b=s0, c=x3[6], out=w31);        // w31 = s1.s0.x3[6]
  And3(a=s1, b=s0, c=x3[7], out=w32);        // w32 = s1.s0.x3[7]
 

  Or4(a=w1, b=w9, c=w17, d=w25, out=y[0]);       // y[0] = ~s1.~s0.x0[0] + ~s1.s0.x1[0] + s1.~s0.x2[0] + s1.s0.x3[0]
  Or4(a=w2, b=w10, c=w18, d=w26, out=y[1]);      // y[1] = ~s1.~s0.x0[1] + ~s1.s0.x1[1] + s1.~s0.x2[1] + s1.s0.x3[1]
  Or4(a=w3, b=w11, c=w19, d=w27, out=y[2]);      // y[2] = ~s1.~s0.x0[2] + ~s1.s0.x1[2] + s1.~s0.x2[2] + s1.s0.x3[2]
  Or4(a=w4, b=w12, c=w20, d=w28, out=y[3]);      // y[3] = ~s1.~s0.x0[3] + ~s1.s0.x1[3] + s1.~s0.x2[3] + s1.s0.x3[3]
  Or4(a=w5, b=w13, c=w21, d=w29, out=y[4]);      // y[4] = ~s1.~s0.x0[4] + ~s1.s0.x1[4] + s1.~s0.x2[4] + s1.s0.x3[4]
  Or4(a=w6, b=w14, c=w22, d=w30, out=y[5]);      // y[5] = ~s1.~s0.x0[5] + ~s1.s0.x1[5] + s1.~s0.x2[5] + s1.s0.x3[5]
  Or4(a=w7, b=w15, c=w23, d=w31, out=y[6]);      // y[6] = ~s1.~s0.x0[6] + ~s1.s0.x1[6] + s1.~s0.x2[6] + s1.s0.x3[6]
  Or4(a=w8, b=w16, c=w24, d=w32, out=y[7]);      // y[7] = ~s1.~s0.x0[7] + ~s1.s0.x1[7] + s1.~s0.x2[7] + s1.s0.x3[7]

}